[1mdiff --git a/BinaryTree2/12_leedcodeQuestion.ipynb b/BinaryTree2/12_leedcodeQuestion.ipynb[m
[1mdeleted file mode 100644[m
[1mindex 140f393..0000000[m
[1m--- a/BinaryTree2/12_leedcodeQuestion.ipynb[m
[1m+++ /dev/null[m
[36m@@ -1,109 +0,0 @@[m
[31m-{[m
[31m- "cells": [[m
[31m-  {[m
[31m-   "cell_type": "code",[m
[31m-   "execution_count": 8,[m
[31m-   "metadata": {},[m
[31m-   "outputs": [[m
[31m-    {[m
[31m-     "name": "stdout",[m
[31m-     "output_type": "stream",[m
[31m-     "text": [[m
[31m-      "5\n"[m
[31m-     ][m
[31m-    }[m
[31m-   ],[m
[31m-   "source": [[m
[31m-    "import queue\n",[m
[31m-    "class node:\n",[m
[31m-    "    def __init__(self,val):\n",[m
[31m-    "        self.val = val\n",[m
[31m-    "        self.left = None\n",[m
[31m-    "        self.right = None\n",[m
[31m-    "\n",[m
[31m-    "def Avg(newroot):\n",[m
[31m-    "    if root is None:\n",[m
[31m-    "        return 0\n",[m
[31m-    "    l = []\n",[m
[31m-    "    q = queue.Queue()\n",[m
[31m-    "    q.put(newroot)\n",[m
[31m-    "\n",[m
[31m-    "    while not q.empty():\n",[m
[31m-    "        currnode = q.get()\n",[m
[31m-    "        l.append(currnode.val)\n",[m
[31m-    "        if currnode.left is not None:\n",[m
[31m-    "            q.put(currnode.left)\n",[m
[31m-    "        if currnode.right is not None:\n",[m
[31m-    "            q.put(currnode.right)\n",[m
[31m-    "    avg = sum(l)//len(l)\n",[m
[31m-    "    return avg\n",[m
[31m-    "\n",[m
[31m-    "def countnodesAVG(root):\n",[m
[31m-    "    if root is None:\n",[m
[31m-    "        return 0\n",[m
[31m-    "    count = 0\n",[m
[31m-    "    q = queue.Queue()\n",[m
[31m-    "    q.put(root)\n",[m
[31m-    "\n",[m
[31m-    "    while not q.empty():\n",[m
[31m-    "        currnode = q.get()\n",[m
[31m-    "        if currnode.val == Avg(currnode):\n",[m
[31m-    "            count+=1\n",[m
[31m-    "        if currnode.left is not None:\n",[m
[31m-    "            q.put(currnode.left)\n",[m
[31m-    "        if currnode.right is not None:\n",[m
[31m-    "            q.put(currnode.right)\n",[m
[31m-    "\n",[m
[31m-    "    return count\n",[m
[31m-    "\n",[m
[31m-    "def takeinputLV():\n",[m
[31m-    "    rootdata = int(input())\n",[m
[31m-    "    if rootdata == -1:\n",[m
[31m-    "        return None\n",[m
[31m-    "    rootnode= node(rootdata)\n",[m
[31m-    "    q = queue.Queue()\n",[m
[31m-    "    q.put(rootnode)\n",[m
[31m-    "\n",[m
[31m-    "    while q.empty() != True:\n",[m
[31m-    "        currnode = q.get()\n",[m
[31m-    "        leftdata = int(input())\n",[m
[31m-    "        if leftdata != -1:\n",[m
[31m-    "            leftnode = node(leftdata)\n",[m
[31m-    "            currnode.left =leftnode\n",[m
[31m-    "            q.put(leftnode)\n",[m
[31m-    "        rightdata = int(input())\n",[m
[31m-    "        if rightdata!=-1:\n",[m
[31m-    "            rightnode = node(rightdata)\n",[m
[31m-    "            currnode.right = rightnode\n",[m
[31m-    "            q.put(rightnode)\n",[m
[31m-    "    return rootnode\n",[m
[31m-    "\n",[m
[31m-    "\n",[m
[31m-    "root = takeinputLV()\n",[m
[31m-    "result = countnodesAVG(root)\n",[m
[31m-    "print(result)\n"[m
[31m-   ][m
[31m-  }[m
[31m- ],[m
[31m- "metadata": {[m
[31m-  "kernelspec": {[m
[31m-   "display_name": "Python 3",[m
[31m-   "language": "python",[m
[31m-   "name": "python3"[m
[31m-  },[m
[31m-  "language_info": {[m
[31m-   "codemirror_mode": {[m
[31m-    "name": "ipython",[m
[31m-    "version": 3[m
[31m-   },[m
[31m-   "file_extension": ".py",[m
[31m-   "mimetype": "text/x-python",[m
[31m-   "name": "python",[m
[31m-   "nbconvert_exporter": "python",[m
[31m-   "pygments_lexer": "ipython3",[m
[31m-   "version": "3.11.4"[m
[31m-  }[m
[31m- },[m
[31m- "nbformat": 4,[m
[31m- "nbformat_minor": 2[m
[31m-}[m
